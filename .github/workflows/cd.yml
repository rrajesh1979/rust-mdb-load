name: CD
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"    # TODO Enhance to use this version
        required: true
#  release:
#    types: [created]

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Version
        id: vars
        shell: bash
        run: |
          version=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)
          echo ::set-output name=VERSION::$(echo "$version")
          
  build:
    needs: [ precheck ]
    name: 'Build ${{ matrix.job.target }}'
    strategy:
      fail-fast: true
      matrix:
        job:
          - { target: aarch64-apple-darwin     , os: macos-latest  ,                  jreleaser_platform: osx-aarch_64   }
          - { target: x86_64-apple-darwin      , os: macos-latest  ,                  jreleaser_platform: osx-x86_64     }
          - { target: x86_64-pc-windows-msvc   , os: windows-latest,                  jreleaser_platform: windows-x86_64 }
          - { target: x86_64-unknown-linux-gnu , os: ubuntu-latest ,                  jreleaser_platform: linux-x86_64   }
          - { target: aarch64-unknown-linux-gnu, os: ubuntu-latest , use-cross: true, jreleaser_platform: linux-aarch_64 }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal

      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --locked --release --all-features
          #--target=${{ matrix.job.target }}
#          args: --locked --release --target=${{ matrix.job.target }}
# TODO: Troubleshoot --target usage

      - name: Troubleshooting 1
        run: |
          ls
          pwd
          echo "ls target/release"
          ls target/release

      - name: Assemble
        uses: jreleaser/release-action@v2
        with:
          version: early-access
          arguments: assemble
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_PLATFORM_OVERRIDE: ${{ matrix.job.jreleaser_platform }}

      - name: Troubleshooting 2
        run: |
          ls
          pwd
          echo "ls target/release"
          ls target/release

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: artifacts
          path: |
            out/jreleaser/assemble/rust_mdb_load/archive/*.zip

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: jreleaser-${{ matrix.job.target }}
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
#  universal:
#    name: 'Build all-apple-darwin'
#    needs: [ precheck, build ]
#    runs-on: macos-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Download artifacts
#        uses: actions/download-artifact@v2
#
#      - name: Build binary
#        shell: bash
#        run: |
#          mkdir -p target/all-apple-darwin/release
#          cd artifacts
#          unzip -q rust_mdb_load-${{ needs.precheck.outputs.VERSION }}-x86_64-apple-darwin.zip
#          unzip -q rust_mdb_load-${{ needs.precheck.outputs.VERSION }}-aarch64-apple-darwin.zip
#          lipo -create rust_mdb_load-${{ needs.precheck.outputs.VERSION }}-x86_64-apple-darwin/bin/rust_mdb_load \
#            rust_mdb_load-${{ needs.precheck.outputs.VERSION }}-aarch64-apple-darwin/bin/rust_mdb_load \
#            -output ../target/all-apple-darwin/release/rust_mdb_load
#      - name: Assemble
#        uses: jreleaser/release-action@v2
#        with:
#          version: early-access
#          arguments: assemble
#        env:
#          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
#          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          JRELEASER_PLATFORM_OVERRIDE: osx
#
#      - name: Upload artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          retention-days: 1
#          name: artifacts
#          path: |
#            out/jreleaser/assemble/rust_mdb_load/archive/*.zip
#      - name: JReleaser output
#        if: always()
#        uses: actions/upload-artifact@v2
#        with:
#          retention-days: 1
#          name: jreleaser-all-apple-darwin
#          path: |
#            out/jreleaser/trace.log
#            out/jreleaser/output.properties
  release:
    needs: [ precheck, build ]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Release
        uses: jreleaser/release-action@v2
        with:
          version: early-access
          arguments: release -PartifactsDir=artifacts -PskipArchiveResolver
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_BRANCH: master
          JRELEASER_HOMEBREW_GITHUB_TOKEN: ${{ secrets.RMDB_RELEASE_TOKEN }}
          JRELEASER_HOMEBREW_GITHUB_BRANCH: master

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

#  release:
#    name: Deploy Release
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest]
#        exclude:
#          - os: ubuntu-latest
#          - os: windows-latest
#    steps:
#      - uses: actions/checkout@master
#      - name: Hub already installed
#        run: |
#          hub --version
#          echo "TAG" $TAG
#      - name: Install Rust
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: nightly    # TODO Should we use stable? What are the differences?
#          override: true
#      - name: Get tag
#        id: tag
#        uses: dawidd6/action-get-tag@v1
#        with:
#          # Optionally strip `v` prefix
#          strip_v: true
#      - name: Use tag
#        run: |
#          echo ${{steps.tag.outputs.tag}}
#          export TAG=${{steps.tag.outputs.tag}}
#          echo v$TAG
#      - name: Run hub commands
#        env:
#          GITHUB_USER: ${{ secrets.GITHUB_USER }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          cargo build --bin rust_mdb_load --release
#          if [ "$RUNNER_OS" == "Linux" ]; then
#              cd target/release
#              export TAG=${{steps.tag.outputs.tag}}
#              export ASSET="rust_mdb_load-$TAG-linux-x86_64.tar.gz"
#              tar czf ../../$ASSET rust_mdb_load
#          elif [ "$RUNNER_OS" == "macOS" ]; then
#              cd target/release
#              export TAG=${{steps.tag.outputs.tag}}
#              export ASSET="rust_mdb_load-$TAG-osx-x86_64.tar.gz"
#              sudo /usr/sbin/purge
#              tar czf ../../$ASSET rust_mdb_load
#          elif [ "$RUNNER_OS" == "Windows" ]; then
#              export ASSET="rust_mdb_load-$TAG-$host.zip"
#              7z a ../../$ASSET rust_mdb_load.exe
#          fi
#          cd ../..
#          hub release edit -m "" --attach $ASSET v$TAG